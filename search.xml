<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>HA-Hadoop配置文件</title>
      <link href="/2020/02/07/ha-hadoop-pei-zhi-wen-jian/"/>
      <url>/2020/02/07/ha-hadoop-pei-zhi-wen-jian/</url>
      
        <content type="html"><![CDATA[<h1>高可用hadoop集群</h1><h2>在Hadoop2.0之前，只有一个NameNode，若NameNode机器出现故障，那么整个集群都无法使用。这个架构存在单点故障的隐患。之后推出了HA的架构，即有两个NameNode，一台为active状态，一台为standby状态。active NameNode对外提供服务，standby实时同步了active NameNode的元数据，当active NameNode节点出现故障，standby NameNode节点可立即切换为active状态并对外提供服务。所以，在实际生产中一般采用HA架构。这里用三台机器测试搭建Hadoop高可用集群。</h2><blockquote><p>避坑–配置隔离机制shell(/bin/true)</p></blockquote><pre class=" language-html"><code class="language-html">Host    安装软件    进程hadoop001    hadoop、zookeeper    NameNode、DFSZKFailoverController、JournalNode、DataNode 、 ResourceManager 、JobHistoryServer、NodeManager 、QuorumPeerMainhadoop002    hadoop、zookeeper    NameNode 、DFSZKFailoverController、JournalNode 、DataNode 、ResourceManager 、NodeManager 、QuorumPeerMainhadoop003    hadoop、zookeeper    JournalNode 、DataNode 、NodeManager、QuorumPeerMain</code></pre><pre><code>    修改配置文件cd /usr/local/src/hadoop-2.6.0/etc/hadoophadoop-env.sh  export JAVA_HOME=/opt/apps/jdk1.8.0_172core-site.xmlmkdir –p /usr/local/src/hadoop-2.6.0/tmp&lt;configuration&gt;        &lt;property&gt;                &lt;name&gt;fs.defaultFS&lt;/name&gt;                &lt;value&gt;hdfs://ns&lt;/value&gt;        &lt;/property&gt;        &lt;property&gt;                &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;                &lt;value&gt;/usr/local/src/hadoop-2.6.0/tmp&lt;/value&gt;        &lt;/property&gt;        &lt;property&gt;                &lt;name&gt;ha.zookeeper.quorum&lt;/name&gt;                &lt;value&gt;master:2181,slave1:2181,slave2:2181&lt;/value&gt;        &lt;/property&gt;&lt;/configuration&gt;hdfs-site.xml&lt;!--指定hdfs的nameservice为ns，需要和core-site.xml中的保持一致 --&gt;          &lt;property&gt;              &lt;name&gt;dfs.nameservices&lt;/name&gt;              &lt;value&gt;ns&lt;/value&gt;          &lt;/property&gt;        &lt;!-- ns下面有两个NameNode，分别是nn1，nn2 --&gt;      &lt;property&gt;         &lt;name&gt;dfs.ha.namenodes.ns&lt;/name&gt;         &lt;value&gt;nn1,nn2&lt;/value&gt;      &lt;/property&gt;      &lt;!-- nn1的RPC通信地址 --&gt;      &lt;property&gt;         &lt;name&gt;dfs.namenode.rpc-address.ns.nn1&lt;/name&gt;         &lt;value&gt;master:9000&lt;/value&gt;      &lt;/property&gt;      &lt;!-- nn1的http通信地址 --&gt;      &lt;property&gt;          &lt;name&gt;dfs.namenode.http-address.ns.nn1&lt;/name&gt;          &lt;value&gt;master:50070&lt;/value&gt;      &lt;/property&gt;      &lt;!-- nn2的RPC通信地址 --&gt;      &lt;property&gt;          &lt;name&gt;dfs.namenode.rpc-address.ns.nn2&lt;/name&gt;          &lt;value&gt;slave1:9000&lt;/value&gt;      &lt;/property&gt;      &lt;!-- nn2的http通信地址 --&gt;      &lt;property&gt;          &lt;name&gt;dfs.namenode.http-address.ns.nn2&lt;/name&gt;          &lt;value&gt;slave1:50070&lt;/value&gt;      &lt;/property&gt;      &lt;!-- 指定NameNode的元数据在JournalNode上的存放位置 --&gt;      &lt;property&gt;           &lt;name&gt;dfs.namenode.shared.edits.dir&lt;/name&gt;           &lt;value&gt;qjournal://master:8485;slave1:8485;slave2:8485/ns&lt;/value&gt;      &lt;/property&gt;      &lt;!-- 指定JournalNode在本地磁盘存放数据的位置 --&gt;      &lt;property&gt;            &lt;name&gt;dfs.journalnode.edits.dir&lt;/name&gt;            &lt;value&gt;/usr/local/src/hadoop-2.6.0/hdf_journal&lt;/value&gt;      &lt;/property&gt;      &lt;!-- 开启NameNode故障时自动切换 --&gt;      &lt;property&gt;            &lt;name&gt;dfs.ha.automatic-failover.enabled&lt;/name&gt;            &lt;value&gt;true&lt;/value&gt;      &lt;/property&gt;      &lt;!-- 配置失败自动切换实现方式 --&gt;      &lt;property&gt;              &lt;name&gt;dfs.client.failover.proxy.provider.ns&lt;/name&gt;              &lt;value&gt;org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider&lt;/value&gt;      &lt;/property&gt;      &lt;!-- 配置隔离机制 --&gt;      &lt;property&gt;               &lt;name&gt;dfs.ha.fencing.methods&lt;/name&gt;               &lt;value&gt;                sshfence                shell(/bin/true)             &lt;/value&gt;      &lt;/property&gt;      &lt;!-- 使用隔离机制时需要ssh免登陆 --&gt;      &lt;property&gt;              &lt;name&gt;dfs.ha.fencing.ssh.private-key-files&lt;/name&gt;              &lt;value&gt;/root/.ssh/id_rsa&lt;/value&gt;      &lt;/property&gt;      &lt;!-- 配置sshfence隔离机制超时时间 --&gt;    &lt;property&gt;               &lt;name&gt;dfs.ha.fencing.ssh.connect-timeout&lt;/name&gt;               &lt;value&gt;30000&lt;/value&gt;      &lt;/property&gt;                                     &lt;property&gt;              &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt;              &lt;value&gt;/usr/local/src/hadoop-2.6.0/hdf_name&lt;/value&gt;        &lt;final&gt;true&lt;/final&gt;       &lt;/property&gt;          &lt;property&gt;              &lt;name&gt;dfs.datanode.data.dir&lt;/name&gt;              &lt;value&gt;/usr/local/src/hadoop-2.6.0/hdf_data&lt;/value&gt;          &lt;/property&gt;          &lt;property&gt;             &lt;name&gt;dfs.replication&lt;/name&gt;             &lt;value&gt;3&lt;/value&gt;          &lt;/property&gt;         &lt;!-- 在NN和DN上开启WebHDFS (REST API)功能,不是必须 --&gt;                                                                          &lt;property&gt;             &lt;name&gt;dfs.webhdfs.enabled&lt;/name&gt;             &lt;value&gt;true&lt;/value&gt;          &lt;/property&gt;mapred-site.xmlcp mapred-site.xml.template mapred-site.xml          &lt;property&gt;              &lt;name&gt;mapreduce.framework.name&lt;/name&gt;              &lt;value&gt;yarn&lt;/value&gt;        &lt;/property&gt;yarn-site.xml  &lt;!-- 开启YARN HA --&gt;  &lt;property&gt;    &lt;name&gt;yarn.resourcemanager.ha.enabled&lt;/name&gt;    &lt;value&gt;true&lt;/value&gt;  &lt;/property&gt;  &lt;!-- 启用自动故障转移 --&gt;  &lt;property&gt;    &lt;name&gt;yarn.resourcemanager.ha.automatic-failover.enabled&lt;/name&gt;    &lt;value&gt;true&lt;/value&gt;  &lt;/property&gt;  &lt;!-- 指定YARN HA的名称 --&gt;  &lt;property&gt;    &lt;name&gt;yarn.resourcemanager.cluster-id&lt;/name&gt;    &lt;value&gt;yarncluster&lt;/value&gt;  &lt;/property&gt;  &lt;!-- 指定两个resourcemanager的名称 --&gt;  &lt;property&gt;    &lt;name&gt;yarn.resourcemanager.ha.rm-ids&lt;/name&gt;    &lt;value&gt;rm1,rm2&lt;/value&gt;  &lt;/property&gt;  &lt;!-- 配置rm1，rm2的主机 --&gt;  &lt;property&gt;    &lt;name&gt;yarn.resourcemanager.hostname.rm1&lt;/name&gt;    &lt;value&gt;slave2&lt;/value&gt;  &lt;/property&gt;  &lt;property&gt;    &lt;name&gt;yarn.resourcemanager.hostname.rm2&lt;/name&gt;    &lt;value&gt;slave1&lt;/value&gt;  &lt;/property&gt;  &lt;!-- 配置YARN的http端口 --&gt;  &lt;property&gt;    &lt;name&gt;yarn.resourcemanager.webapp.address.rm1&lt;/name&gt;    &lt;value&gt;slave2:8088&lt;/value&gt;  &lt;/property&gt;  &lt;property&gt;    &lt;name&gt;yarn.resourcemanager.webapp.address.rm2&lt;/name&gt;    &lt;value&gt;slave1:8088&lt;/value&gt;  &lt;/property&gt;  &lt;!-- 配置zookeeper的地址 --&gt;  &lt;property&gt;    &lt;name&gt;yarn.resourcemanager.zk-address&lt;/name&gt;    &lt;value&gt;master:2181,slave1:2181,slave2:2181&lt;/value&gt;  &lt;/property&gt;  &lt;!-- 配置zookeeper的存储位置 --&gt;  &lt;property&gt;    &lt;name&gt;yarn.resourcemanager.zk-state-store.parent-path&lt;/name&gt;    &lt;value&gt;/rmstore&lt;/value&gt;  &lt;/property&gt;  &lt;!-- 开启yarn resourcemanager restart --&gt;  &lt;property&gt;    &lt;name&gt;yarn.resourcemanager.recovery.enabled&lt;/name&gt;    &lt;value&gt;true&lt;/value&gt;  &lt;/property&gt;  &lt;!-- 配置resourcemanager的状态存储到zookeeper中 --&gt;  &lt;property&gt;    &lt;name&gt;yarn.resourcemanager.store.class&lt;/name&gt;    &lt;value&gt;org.apache.hadoop.yarn.server.resourcemanager.recovery.ZKRMStateStore&lt;/value&gt;  &lt;/property&gt;  &lt;!-- 开启yarn nodemanager restart --&gt;  &lt;property&gt;    &lt;name&gt;yarn.nodemanager.recovery.enabled&lt;/name&gt;    &lt;value&gt;true&lt;/value&gt;  &lt;/property&gt;  &lt;property&gt;    &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;    &lt;value&gt;mapreduce_shuffle&lt;/value&gt;  &lt;/property&gt;  &lt;property&gt;    &lt;name&gt;yarn.nodemanager.address&lt;/name&gt;    &lt;value&gt;${yarn.nodemanager.hostname}:8041&lt;/value&gt;  &lt;/property&gt;    修改slaves文件masterslave1slave2    拷贝到其他环境scp -r /usr/local/src/hadoop-2.6.0 slave1:/usr/local/src/scp -r /usr/local/src/hadoop-2.6.0 slave2:/usr/local/src/</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Pandas数据处理-map、apply、applymap详解</title>
      <link href="/2020/02/07/pandas-shu-ju-chu-li-map-apply-applymap-xiang-jie/"/>
      <url>/2020/02/07/pandas-shu-ju-chu-li-map-apply-applymap-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h1>Pandas数据处理-map、apply、applymap详解</h1><p></p><blockquote><p>一盏灯， 一片昏黄； 一简书， 一杯淡茶。 守着那一份淡定， 品读属于自己的寂寞。 保持淡定， 才能欣赏到最美丽的风景！ 保持淡定， 人生从此不再寂寞。</p></blockquote><h3>在日常的数据处理中，经常会对一个DataFrame进行逐行、逐列和逐元素的操作，对应这些操作，Pandas中的map,apply和applymap可以解决绝大部分这样的数据处理需求。这篇文章就以案例附带图解的方式，为大家详细介绍一下这三个方法的实现原理，相信读完本文后，不论是小白还是Pandas的进阶学习者，都会对这三个方法有更深入的理解。</h3><pre class=" language-python"><code class="language-python">boolean<span class="token operator">=</span><span class="token punctuation">[</span><span class="token boolean">True</span><span class="token punctuation">,</span><span class="token boolean">False</span><span class="token punctuation">]</span> gender<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"男"</span><span class="token punctuation">,</span><span class="token string">"女"</span><span class="token punctuation">]</span> color<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"white"</span><span class="token punctuation">,</span><span class="token string">"black"</span><span class="token punctuation">,</span><span class="token string">"yellow"</span><span class="token punctuation">]</span> data<span class="token operator">=</span>pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span>         <span class="token string">"height"</span><span class="token punctuation">:</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">,</span><span class="token number">190</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token string">"weight"</span><span class="token punctuation">:</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token string">"smoker"</span><span class="token punctuation">:</span><span class="token punctuation">[</span>boolean<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>         <span class="token string">"gender"</span><span class="token punctuation">:</span><span class="token punctuation">[</span>gender<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>         <span class="token string">"age"</span><span class="token punctuation">:</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token string">"color"</span><span class="token punctuation">:</span><span class="token punctuation">[</span>color<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><h3>数据集如下所示，各列分别代表身高、体重、是否吸烟、性别、年龄和肤色</h3><p><img src="https://upload-images.jianshu.io/upload_images/8316927-8fd13a08ad29fb52.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/393/format/webp" alt=""></p><h1>Series数据处理</h1><h3>如果需要把数据集中 gender 列的男替换为1，女替换为0，怎么做呢？绝对不是用for循环实现，使 用 Series.map() 可以很容易做到，少仅需一行代码。</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#①使用字典进行映射 </span>data<span class="token punctuation">[</span><span class="token string">"gender"</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">"gender"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"男"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"女"</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#②使用函数</span><span class="token keyword">def</span> <span class="token function">gender_map</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    gender <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token string">"男"</span> <span class="token keyword">else</span> <span class="token number">0</span>    <span class="token keyword">return</span> gender<span class="token comment" spellcheck="true">#注意这里传入的是函数名，不带括号</span>data<span class="token punctuation">[</span><span class="token string">"gender"</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">"gender"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>gender_map<span class="token punctuation">)</span></code></pre><p><img src="https://upload-images.jianshu.io/upload_images/8316927-e8aa575576fa6af8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1097/format/webp" alt=""><br><img src="https://upload-images.jianshu.io/upload_images/8316927-11e20dc0caaf026a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1107/format/webp" alt=""></p><h3>不论是利用字典还是函数进行映射，方法都是把对应的数据逐个当作参数传入到字典或函数中，得到映射后的值。</h3><h1>apply</h1><h3>同时Series对象还有 apply 方法， apply 方法的作用原理和 map 方法类似，区别在于 apply 能够传入 功能更为复杂的函数。怎么理解呢？一起看看下面的例子。假设在数据统计的过程中，年龄 age 列有较大误差，需要对其进行调整（加上或减去一个值）， 由于这个加上或减去的值未知，故在定义函数时，需要加多一个参数 bias ，此时用 map 方法是操 作不了的（传入 map 的函数只能接收一个参数）， apply 方法则可以解决这个问题</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">apply_age</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>bias<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x<span class="token operator">+</span>bias<span class="token comment" spellcheck="true">#以元组的方式传入额外的参数</span>data<span class="token punctuation">[</span><span class="token string">"age"</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">"age"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span>apply_age<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><img src="https://upload-images.jianshu.io/upload_images/8316927-088f39b471563547.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/387/format/webp" alt=""></p><h3>可以看到age列都减了3，当然，这里只是简单举了个例子，当需要进行复杂处理时，更能体现 apply 的作用。总而言之，对于Series而言， map 可以解决绝大多数的数据处理需求，但如果需要使用较为复杂的 函数，则需要用到 apply 方法。</h3><h1>DataFrame数据处理</h1><h2>apply</h2><h3>对 DataFrame 而言， apply 是非常重要的数据处理方法，它可以接收各种各样的函数（Python内置 的或自定义的），处理方式很灵活，下面通过几个例子来看看 apply 的具体使用及其原理。在进行具体介绍之前，首先需要介绍一下 DataFrame 中 axis 的概念，在 DataFrame 对象的大多数方法 中，都会有 axis 这个参数，它控制了你指定的操作是沿着0轴还是1轴进行。 axis=0 代表操作对 列 columns 进行， axis=1 代表操作对 行row 进行，如下图所示。</h3><p><img src="https://upload-images.jianshu.io/upload_images/8316927-62f8b90f54ac7f3b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/846/format/webp" alt=""></p><h3>假设现在需要对 data 中的数值列分别进行取对数和求和的操作，这时可以用 apply 进行相应的操 作，因为是对列进行操作，所以需要指定 axis=0 ，使用下面的两行代码可以很轻松地解决我们的 问题。</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 沿着0轴求和</span>data<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"height"</span><span class="token punctuation">,</span><span class="token string">"weight"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span>np<span class="token punctuation">.</span>sum<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 沿着0轴取对数</span>data<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"height"</span><span class="token punctuation">,</span><span class="token string">"weight"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span>np<span class="token punctuation">.</span>log<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span></code></pre><p><img src="https://upload-images.jianshu.io/upload_images/8316927-101f0388ec0daba3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1192/format/webp" alt=""><br><img src="https://upload-images.jianshu.io/upload_images/8316927-737349d9670abf55.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1191/format/webp" alt=""></p><h3>当沿着 轴0（axis=0） 进行操作时，会将各列( columns )默认以 Series 的形式作为参数，传入到你指定 的操作函数中，操作后合并并返回相应的结果。那如果在实际使用中需要按行进行操作（ axis=1 ）,那整个过程又是怎么实现的呢？在数据集中，有身高和体重的数据，所以根据这个，我们可以计算每个人的BMI指数（体检时常 用的指标，衡量人体肥胖程度和是否健康的重要标准），计算公式是： 体重指数BMI=体重/身高的平方 （国际单位kg/㎡） ，因为需要对每个样本进行操作，这里使用 axis=1 的 apply 进行操作，代码如下：</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">BMI</span><span class="token punctuation">(</span>series<span class="token punctuation">)</span><span class="token punctuation">:</span>    weight <span class="token operator">=</span> series<span class="token punctuation">[</span><span class="token string">"weight"</span><span class="token punctuation">]</span>    height <span class="token operator">=</span> series<span class="token punctuation">[</span><span class="token string">"height"</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">100</span>    BMI <span class="token operator">=</span> weight<span class="token operator">/</span>height<span class="token operator">**</span><span class="token number">2</span>    <span class="token keyword">return</span> BMIdata<span class="token punctuation">[</span><span class="token string">"BMI"</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">.</span>apply<span class="token punctuation">(</span>BMI<span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><p><img src="https://upload-images.jianshu.io/upload_images/8316927-94038f410750c769.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1196/format/webp" alt=""></p><h3>当 apply 设置了 axis=1 对行进行操作时，会默认将每一行数据以 Series 的形式（Series的索引为列 名）传入指定函数，返回相应的结果。总结一下对 DataFrame 的 apply 操作：1. 当 axis=0 时，对 每列columns 执行指定函数；当 axis=1 时，对 每行row 执行指定函数。 2. 无论 axis=0 还是 axis=1 ，其传入指定函数的默认形式均为 Series ，可以通过设置 raw=True 传入 numpy数组 。 3. 对每个Series执行结果后，会将结果整合在一起返回（若想有返回值，定义函数时需要 return 相应的值） 4. 当然， DataFrame 的 apply 和 Series 的 apply 一样，也能接收更复杂的函数，如传入参数等，实现 原理是一样的，具体用法详见官方文档。</h3><h1>applymap</h1><h3>applymap 的用法比较简单，会对 DataFrame 中的每个单元格执行指定函数的操作，虽然用途不如 apply 广泛，但在某些场合下还是比较有用的，如下面这个例子。</h3><pre class=" language-python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>         <span class="token punctuation">{</span>                 <span class="token string">"A"</span><span class="token punctuation">:</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 <span class="token string">"B"</span><span class="token punctuation">:</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 <span class="token string">"C"</span><span class="token punctuation">:</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 <span class="token string">"D"</span><span class="token punctuation">:</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 <span class="token string">"E"</span><span class="token punctuation">:</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><p><img src="https://upload-images.jianshu.io/upload_images/8316927-541b70daacaf931f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/448/format/webp" alt=""></p><h3>将所有的值保留两位小数显示，使用applymap</h3><pre class=" language-python"><code class="language-python">df<span class="token punctuation">.</span>applymap<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span><span class="token string">"%.2f"</span> <span class="token operator">%</span> x<span class="token punctuation">)</span></code></pre><p><img src="https://upload-images.jianshu.io/upload_images/8316927-f43463cb247b88d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt=""></p><h2>Powered by MaSheng</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/02/07/hello-world/"/>
      <url>/2020/02/07/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
